/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET    
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */

const port = 5173;
const express = require("express");
const fs = require("fs");
const bodyParser = require("body-parser");
const uuid = require("uuid");

const app = express();

app.use(bodyParser.json());

// GET Todos
app.get("/todos", (req, res) => {
  fs.readFile("files/todos.txt", "utf8", (err, data) => {
    if (err) {
      console.error("Error reading file:", err);
      return;
    }
    res.status(200).send(JSON.stringify(JSON.parse(data).todos));
  });
});

// GET Todo by Id
app.get("/todos/:id", (req, res) => {
  const id = req.params.id;
  fs.readFile("files/todos.txt", "utf8", (err, data) => {
    if (err) {
      console.error("Error reading file:", err);
      return;
    } else {
      const todoArray = JSON.parse(data);
      console.log(todoArray);
      const todo = todoArray.todos.filter((todo) => todo.id == id);
      if (todo.length == 0) {
        res.sendStatus(404);
      } else {
        res.status(200).send(todo[0]);
      }
    }
  });
});

app.put("/todos/:id", (req, res) => {
  const id = req.params.id;
  const { title, description } = req.body;
  fs.readFile("files/todos.txt", "utf8", (err, data) => {
    if (err) {
      console.error("Error reading file:", err);
      return;
    } else {
      const todoArray = JSON.parse(data);
      let newTodo = null;
      todoArray.todos = todoArray.todos.map((todo) => {
        if (todo.id == id) {
          todo.title = title;
          todo.description = description;
          newTodo = todo;
        }
        return todo;
      });
      fs.writeFile(
        "files/todos.txt",
        JSON.stringify(todoArray),
        "utf8",
        (err) => {
          if (err) {
            console.error("Error writing to file:", err);
          } else {
            console.log("Data written to file successfully.");
            res.status(200).send(newTodo);
          }
        }
      );
    }
  });
});

// Add Todo
app.post("/todos", (req, res) => {
  const { title, description } = req.body;
  fs.readFile("files/todos.txt", "utf8", (err, data) => {
    if (err) {
      console.error("Error reading file:", err);
      return;
    } else {
      const uid = uuid.v4();
      const todo = {
        id: uid,
        title,
        description,
      };
      const todoArray = JSON.parse(data);
      todoArray.todos.push(todo);
      fs.writeFile(
        "files/todos.txt",
        JSON.stringify(todoArray),
        "utf8",
        (err) => {
          if (err) {
            console.error("Error writing to file:", err);
          } else {
            console.log("Data written to file successfully.");
            res.status(201).send(todo);
          }
        }
      );
    }
  });
});

// Delete Todo
app.delete("/todos/:id", (req, res) => {
  const id = req.params.id;
  fs.readFile("files/todos.txt", "utf8", (err, data) => {
    if (err) {
      console.error("Error reading file:", err);
      return;
    } else {
      const todoArray = JSON.parse(data);
      todoArray.todos = todoArray.todos.filter((todo) => todo.id != id);
      fs.writeFile(
        "files/todos.txt",
        JSON.stringify(todoArray),
        "utf8",
        (err) => {
          if (err) {
            console.error("Error writing to file:", err);
          } else {
            console.log("Todo deleted.");
            res.status(200).send({ message: "Todo deleted" });
          }
        }
      );
    }
  });
});

// 404
app.get("*", function (req, res) {
  res.send("Route not defined", 404);
});

app.listen(port, () => {
  console.log(`server listening on port ${port}`);
});
module.exports = app;
